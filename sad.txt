 import React, { useEffect, useRef, useState } from 'react'
 import { useFrame, useGraph, useThree } from '@react-three/fiber'
 import { useAnimations, useFBX, useGLTF, useScroll } from '@react-three/drei'
 import { SkeletonUtils } from 'three-stdlib'
 import * as THREE from 'three'

 export function Avatar(props) {
   const { scene } = useGLTF('/models/DhwaniAvatar.glb')
   const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
   const { nodes, materials } = useGraph(clone)
   const { animations: idleAnimation } = useFBX("/animations/Idle.fbx")
   const { animations: walkingAnimation } = useFBX("/animations/Walking.fbx")

   const group = useRef()
   const headBoneRef = useRef()

   idleAnimation[0].name = "Idle"
   walkingAnimation[0].name = "Walking"
   const { actions } = useAnimations([idleAnimation[0], walkingAnimation[0]], group)
   const [animation, setAnimation] = useState("Idle")

    Track cursor position in normalized device coordinates
   const mouse = useRef(new THREE.Vector2())
   useEffect(() => {
     function onPointerMove(e) {
       mouse.current.x = (e.clientX / window.innerWidth) * 2 - 1
       mouse.current.y = -(e.clientY / window.innerHeight) * 2 + 1
     }
     window.addEventListener('pointermove', onPointerMove)
     return () => window.removeEventListener('pointermove', onPointerMove)
   }, [])

    Attach or retrieve head bone
   useEffect(() => {
      If your bone is indeed called "Head", this should work:
     headBoneRef.current = nodes.Hips.getObjectByName("Head")
   }, [nodes])

    Set up initial animations
   useEffect(() => {
     actions[animation].reset().fadeIn(0.5).play()
     return () => actions[animation].fadeOut(0.5)
   }, [animation, actions])

    Scroll-based walking/idle
   const scrollData = useScroll()
   const lastScroll = useRef(0)
   useFrame(({ camera }) => {
     const scrollDelta = scrollData.offset - lastScroll.current
     let rotationTarget = 0

     if (Math.abs(scrollDelta) > 0.00001) {
       setAnimation("Walking")
       rotationTarget = scrollDelta > 0 ? 0 : Math.PI
     } else {
       setAnimation("Idle")
     }
     group.current.rotation.y = THREE.MathUtils.lerp(
       group.current.rotation.y,
       rotationTarget,
       0.1
     )
     lastScroll.current = scrollData.offset

      Make head bone look toward the cursor in 3D space
     if (headBoneRef.current) {
       const lookPos = new THREE.Vector3(
         mouse.current.x ,
         mouse.current.y ,
         0.5
       ).unproject(camera)
       headBoneRef.current.lookAt(lookPos)
     }
   })

   return (
     <group {...props} dispose={null} ref={group}>
       <primitive object={nodes.Hips} />
       <skinnedMesh
         name="Wolf3D_Hair"
         geometry={nodes.Wolf3D_Hair.geometry}
         material={materials.Wolf3D_Hair}
         skeleton={nodes.Wolf3D_Hair.skeleton}
       />
       <skinnedMesh
         name="Wolf3D_Body"
         geometry={nodes.Wolf3D_Body.geometry}
         material={materials.Wolf3D_Body}
         skeleton={nodes.Wolf3D_Body.skeleton}
       />
       <skinnedMesh
         name="Wolf3D_Outfit_Bottom"
         geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
         material={materials.Wolf3D_Outfit_Bottom}
         skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
       />
       <skinnedMesh
         name="Wolf3D_Outfit_Footwear"
         geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
         material={materials.Wolf3D_Outfit_Footwear}
         skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
       />
       <skinnedMesh
         name="Wolf3D_Outfit_Top"
         geometry={nodes.Wolf3D_Outfit_Top.geometry}
         material={materials.Wolf3D_Outfit_Top}
         skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
       />
       <skinnedMesh
         name="EyeLeft"
         geometry={nodes.EyeLeft.geometry}
         material={materials.Wolf3D_Eye}
         skeleton={nodes.EyeLeft.skeleton}
         morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
         morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
       />
       <skinnedMesh
         name="EyeRight"
         geometry={nodes.EyeRight.geometry}
         material={materials.Wolf3D_Eye}
         skeleton={nodes.EyeRight.skeleton}
         morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
         morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
       />
       <skinnedMesh
         name="Wolf3D_Head"
         geometry={nodes.Wolf3D_Head.geometry}
         material={materials.Wolf3D_Skin}
         skeleton={nodes.Wolf3D_Head.skeleton}
         morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
         morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
       />
       <skinnedMesh
         name="Wolf3D_Teeth"
         geometry={nodes.Wolf3D_Teeth.geometry}
         material={materials.Wolf3D_Teeth}
         skeleton={nodes.Wolf3D_Teeth.skeleton}
         morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
         morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
       />
     </group>
   )
 }

 useGLTF.preload('/models/DhwaniAvatar.glb')
 useFBX.preload("/animations/Idle.fbx")
 useFBX.preload("/animations/Walking.fbx")


